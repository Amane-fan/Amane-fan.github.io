<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ABC388G</title>
    <link href="/2025/02/19/ABC388G/"/>
    <url>/2025/02/19/ABC388G/</url>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="https://atcoder.jp/contests/abc388/tasks/abc388_g">https://atcoder.jp/contests/abc388/tasks/abc388_g</a></p></blockquote><blockquote><p>标签：ST表，二分，贪心</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>首先考虑如果区间询问是 $[1,n]$ 如何做：</p><p>发现答案是单调的，考虑二分答案，对于每一个 $mid$ ，一定是区间 $[1,mid]$ 和区间 $[n - mid + 1, n]$ 从左往右依次配对</p><p>简单证明一下：假设 $x1&lt;x2$ 且本应与他们配对的分别是 $y1&lt;y2$ ，如果此时是可以配对成功的，我们选择了 $x1与y2$ 配对，那么就会导致有可能 $x2和y1$ 无法完成配对。因此，无论在哪种情况下，都一定是从左往右依次配对。</p><p>那么问题来到了如何针对不同区间询问，如果仍然采用上述方式，那么时间复杂度就是 $O(q<em>n</em>logn)$ 无法接受，因此考虑如何优化其中的 $O(n)$ 判断过程。</p><p>构造一个序列 $C_i$ 满足如下条件：</p><ul><li>$C_1&#x3D;inf$ （代表没有满足要求的索引）</li><li>对于所有 $i$ 满足： $C_i$ 是第 $i$ 个数可以与前面的数配对的最大索引的位置</li></ul><blockquote><p>记与 $i$ 位置前面与其配对的数的索引为 $j$ ，那么有： $i &#x3D; r - k + 1 + x - l$ ，即 $j &#x3D; i - len + k$ （len代表区间长度） </p></blockquote><p> 对于区间 $[n - k + 1,n]$ 中的每一个 $i$ 满足： $C_i &gt;&#x3D; j$ 即 $C_i &gt;&#x3D; i - len + k$ 。</p><p> 即 $C_i - i &gt;&#x3D; k - len$ 。</p><p>发现 $k - len$ 是常数，要满足所有 $i$ 都要大于等于这个常数，那么只需要其中的最小值大于等于它即可。</p><p>因此，我们需要一个数据结构，能够快速查询到区间最值：ST表。</p><p>我们使用ST表来维护 $C_i - i$ 的最小值，时间复杂度为： $O(1)$ 。</p><p> 因此，总的时间复杂度为 $O((n + q)*logn)$ 。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><blockquote><p>附ST表模板</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(),(x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> All(x) (x).begin() + 1,(x).end()</span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> F&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SparseTable</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    F fun;<br>    vector&lt;vector&lt;T&gt;&gt; f;<br>    <span class="hljs-built_in">SparseTable</span>(<span class="hljs-type">const</span> vector&lt;T&gt; &amp;a, <span class="hljs-type">const</span> F &amp;fun_): <span class="hljs-built_in">n</span>(<span class="hljs-built_in">sz</span>(a) - <span class="hljs-number">1</span>), <span class="hljs-built_in">fun</span>(fun_) &#123;<br>        <span class="hljs-type">int</span> logN = __lg(n) + <span class="hljs-number">1</span>;<br>        f.<span class="hljs-built_in">assign</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;T&gt;(logN + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            f[i][<span class="hljs-number">0</span>] = a[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= logN; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= n; i++) &#123;<br>                f[i][j] = <span class="hljs-built_in">fun</span>(f[i][j - <span class="hljs-number">1</span>], f[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-built_in">assert</span>(<span class="hljs-number">1</span> &lt;= l &amp;&amp; l &lt;= r &amp;&amp; r &lt;= n);<br>        <span class="hljs-type">int</span> s = __lg(r - l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fun</span>(f[l][s], f[r - (<span class="hljs-number">1</span> &lt;&lt; s) + <span class="hljs-number">1</span>][s]);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, inf)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> idx = <span class="hljs-built_in">upper_bound</span>(<span class="hljs-built_in">All</span>(a), a[i] / <span class="hljs-number">2</span>) - a.<span class="hljs-built_in">begin</span>() - <span class="hljs-number">1</span>;<br>        c[i] = idx - i;<br>    &#125;<br><br>    <span class="hljs-function">SparseTable <span class="hljs-title">ST</span><span class="hljs-params">(c, [&amp;](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">return</span> min(a, b);</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;)</span></span>;<br><br>    <span class="hljs-type">int</span> q;<br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-type">int</span> len = r - l + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-type">int</span> k) -&gt; <span class="hljs-type">bool</span> &#123;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> ST.<span class="hljs-built_in">query</span>(r - k + <span class="hljs-number">1</span>, r) &gt;= k - len;<br>        &#125;;<br><br>        <span class="hljs-type">int</span> lo = <span class="hljs-number">0</span>, hi = len / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (lo &lt;= hi) &#123;<br>            <span class="hljs-type">int</span> mid = lo + hi &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) lo = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> hi = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        cout &lt;&lt; hi &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P4137</title>
    <link href="/2025/02/19/%E6%B4%9B%E8%B0%B7P4137/"/>
    <url>/2025/02/19/%E6%B4%9B%E8%B0%B7P4137/</url>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="https://www.luogu.com.cn/problem/P4137">https://www.luogu.com.cn/problem/P4137</a></p></blockquote><blockquote><p>标签：离线，线段树，二分</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>考虑离线，将所有询问按照右端点升序排序</p><p>使用线段树存储<strong>每个数最后一次出现的索引</strong>，并维护区间最小值。</p><blockquote><p>为了方便用线段树存储，我们可以将每个数都增加 1，mex定义为未出现的最小正整数</p></blockquote><p>从左到右枚举每个数，直到枚举到了询问的右端点。</p><p>此时，我们就需要找到一个最小的数 $x$ ，使得 $[1, x - 1]$ 这个区间内所有的数的最大索引都大于等于当前询问的左端点，而 $x$ 出现的最大索引小于当前询问的左端点，那么当前询问的答案就是 $x$ 。</p><p>可以用线段树上二分的方式解决，这就是为什么需要维护区间最小值的原因。</p><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> si(x) int(x.size())</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(),(x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> All(x) (x).begin() + 1,(x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">chmax</span><span class="hljs-params">(T &amp;a, <span class="hljs-type">const</span> T &amp;b)</span> </span>&#123; <span class="hljs-keyword">if</span> (a&lt;b) &#123; a=b; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">chmin</span><span class="hljs-params">(T &amp;a, <span class="hljs-type">const</span> T &amp;b)</span> </span>&#123; <span class="hljs-keyword">if</span> (b&lt;a) &#123; a=b; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SegmentTree</span> &#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(x) (x &lt;&lt; 1)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(x) (x &lt;&lt; 1 | 1)</span><br>    <span class="hljs-type">int</span> n;<br>    vector&lt;Info&gt; info;<br>    <span class="hljs-built_in">SegmentTree</span>(): <span class="hljs-built_in">n</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>    <span class="hljs-built_in">SegmentTree</span>(<span class="hljs-type">int</span> n_, Info v_ = <span class="hljs-built_in">Info</span>()) &#123;<br>        <span class="hljs-built_in">init</span>(<span class="hljs-built_in">vector</span>&lt;Info&gt;(n_ + <span class="hljs-number">1</span>, v_));<br>    &#125;<br>    <span class="hljs-built_in">SegmentTree</span>(vector&lt;Info&gt; init_) &#123;<br>        <span class="hljs-built_in">init</span>(init_);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(vector&lt;Info&gt; init_)</span> </span>&#123;<br>        n = init_.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        info.<span class="hljs-built_in">assign</span>(n &lt;&lt; <span class="hljs-number">2</span>, <span class="hljs-built_in">Info</span>());<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; build = [&amp;](<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) &#123;<br>            <span class="hljs-keyword">if</span> (l == r) &#123;<br>                info[id] = init_[l];<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(id), l, mid);<br>            <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(id), mid + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-built_in">pushUp</span>(id);<br>        &#125;;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushUp</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>        info[id] = info[<span class="hljs-built_in">ls</span>(id)] + info[<span class="hljs-built_in">rs</span>(id)];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">const</span> Info &amp;v)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            info[id] = v;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x &lt;= mid)&#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-built_in">ls</span>(id), l, mid, x, v);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-built_in">rs</span>(id), mid + <span class="hljs-number">1</span>, r, x, v);<br>        &#125;<br>        <span class="hljs-built_in">pushUp</span>(id);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">const</span> Info &amp;v)</span> </span>&#123;<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, v);        <br>    &#125;<br>    <span class="hljs-function">Info <span class="hljs-title">rangeQuery</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &gt; r || y &lt; l) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Info</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r) &#123;<br>            <span class="hljs-keyword">return</span> info[id];<br>        &#125;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">rangeQuery</span>(<span class="hljs-built_in">ls</span>(id), l, mid, x, y) + <span class="hljs-built_in">rangeQuery</span>(<span class="hljs-built_in">rs</span>(id), mid + <span class="hljs-number">1</span>, r, x, y);<br>    &#125;<br>    <span class="hljs-function">Info <span class="hljs-title">rangeQuery</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">rangeQuery</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> F&gt;</span><br><span class="hljs-function">    <span class="hljs-type">int</span> <span class="hljs-title">findFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, F &amp;&amp;pred)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &gt; r || y &lt; l) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r &amp;&amp; !<span class="hljs-built_in">pred</span>(info[id])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            <span class="hljs-keyword">return</span> l;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">findFirst</span>(<span class="hljs-built_in">ls</span>(id), l, mid, x, y, pred);<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">-1</span>) &#123;<br>            res = <span class="hljs-built_in">findFirst</span>(<span class="hljs-built_in">rs</span>(id), mid + <span class="hljs-number">1</span>, r, x, y, pred);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> F&gt;</span><br><span class="hljs-function">    <span class="hljs-type">int</span> <span class="hljs-title">findFirst</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, F &amp;&amp;pred)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">findFirst</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, pred);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> F&gt;</span><br><span class="hljs-function">    <span class="hljs-type">int</span> <span class="hljs-title">findLast</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, F &amp;&amp;pred)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x &gt; r || y &lt; l) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &lt;= l &amp;&amp; y &gt;= r &amp;&amp; !<span class="hljs-built_in">pred</span>(info[id])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l == r) &#123;<br>            <span class="hljs-keyword">return</span> l;<br>        &#125;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">findLast</span>(<span class="hljs-built_in">rs</span>(id), mid + <span class="hljs-number">1</span>, r, x, y, pred);<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">-1</span>) &#123;<br>            res = <span class="hljs-built_in">findLast</span>(<span class="hljs-built_in">ls</span>(id), l, mid, x, y, pred);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> F&gt;</span><br><span class="hljs-function">    <span class="hljs-type">int</span> <span class="hljs-title">findLast</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, F &amp;&amp;pred)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">findLast</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, pred);<br>    &#125;<br>    <span class="hljs-meta">#<span class="hljs-keyword">undef</span> ls</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">undef</span> rs</span><br>&#125;;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Info</span> &#123;<br><span class="hljs-type">int</span> mi;<br><span class="hljs-built_in">Info</span>(): <span class="hljs-built_in">mi</span>(inf) &#123;&#125;<br><span class="hljs-built_in">Info</span>(<span class="hljs-type">int</span> mi_): <span class="hljs-built_in">mi</span>(mi_) &#123;&#125;<br>&#125;;<br><br>Info <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Info &amp;a, <span class="hljs-type">const</span> Info &amp;b) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Info</span>(<span class="hljs-built_in">min</span>(a.mi, b.mi));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    cin &gt;&gt; a[i];<br>    a[i]++;<br>    &#125;<br><br>    vector&lt;array&lt;<span class="hljs-type">int</span>, 3&gt;&gt; <span class="hljs-built_in">Q</span>(m + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    cin &gt;&gt; Q[i][<span class="hljs-number">0</span>] &gt;&gt; Q[i][<span class="hljs-number">1</span>];<br>    Q[i][<span class="hljs-number">2</span>] = i;<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(<span class="hljs-built_in">All</span>(Q), [&amp;](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;a ,<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;b) &#123;<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];<br>    &#125;);<br><br>    <span class="hljs-function">SegmentTree&lt;Info&gt; <span class="hljs-title">seg</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++) &#123;<br>    seg.<span class="hljs-built_in">modify</span>(i, &#123;<span class="hljs-number">0</span>&#125;);<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (a[i] &lt;= n + <span class="hljs-number">1</span>) &#123;<br>    seg.<span class="hljs-built_in">modify</span>(a[i], &#123;i&#125;);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= m &amp;&amp; Q[j][<span class="hljs-number">1</span>] == i) &#123;<br>    <span class="hljs-keyword">auto</span> f = [&amp;](<span class="hljs-type">const</span> Info &amp;info) &#123;<br>    <span class="hljs-keyword">return</span> !(info.mi &gt;= Q[j][<span class="hljs-number">0</span>]);<br>    &#125;;<br>    <span class="hljs-type">int</span> idx = seg.<span class="hljs-built_in">findFirst</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>, f);<br>    ans[Q[j][<span class="hljs-number">2</span>]] = idx;<br>    j++;<br>    &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    cout &lt;&lt; ans[i] - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/19/hello-world/"/>
    <url>/2025/02/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
